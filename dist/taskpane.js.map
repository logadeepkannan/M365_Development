{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const msalConfig = {\n    auth: {\n      clientId: \"afa1af36-1e13-4a8b-bb5a-0d0bfba72bb2\", \n      authority: \"https://login.microsoftonline.com/059227af-dbff-4759-b2c3-8e7e7945fcdb\", \n      redirectUri: \"https://ittridentsqa.sharepoint.com\" \n    }\n  };\n  \n  // Create an instance of MSAL PublicClientApplication\n  const msalInstance = new msal.PublicClientApplication(msalConfig);\n  \n  // Login request configuration\n  const loginRequest = {\n    scopes: [\"https://ittridentsqa.sharepoint.com/.default\"] // The scope for SharePoint access\n  };\n  \n  // Function to get an access token using MSAL.js\n  function getAccessToken() {\n    return msalInstance.acquireTokenSilent(loginRequest).then(response => {\n      return response.accessToken;\n    }).catch(error => {\n      // If silent token acquisition fails, initiate login flow\n      return msalInstance.loginPopup(loginRequest).then(response => {\n        return response.accessToken;\n      }).catch(loginError => {\n        console.error(\"Login failed: \", loginError);\n      });\n    });\n  }\n  \n  // Function to fetch SharePoint list items and populate the dropdown\n  function populateDropdown() {\n    var projectDropdown = document.getElementById(\"projectDropdown\");\n  \n    // Get access token before calling SharePoint REST API\n    getAccessToken().then(accessToken => {\n      var sharePointListUrl = \"https://ittridentsqa.sharepoint.com/sites/TridentSQAM365InternalSolution/_api/web/lists/getbytitle('Project_Dropdown')/items\";\n  \n      // Use Fetch API to get list items\n      fetch(sharePointListUrl, {\n        method: \"GET\",\n        headers: {\n          \"Accept\": \"application/json;odata=verbose\",\n          \"Authorization\": \"Bearer \" + accessToken \n        }\n      })\n        .then(response => response.json())\n        .then(data => {\n          while (projectDropdown.options.length > 1) {\n            projectDropdown.remove(1);\n          }\n  \n          \n          data.d.results.forEach(item => {\n            var option = document.createElement(\"option\");\n            option.value = item.Title;  \n            option.text = item.Title;\n            projectDropdown.add(option);\n          });\n        })\n        .catch(error => console.error(\"Error fetching SharePoint list: \", error));\n    });\n  }\n  \n\n  function addProjectToSubject() {\n    const project = document.getElementById(\"projectDropdown\").value;\n  \n\n    if (project && project !== \"Select a project\") {\n      Office.context.mailbox.item.subject.setAsync(project, (asyncResult) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n          console.log(\"Subject updated successfully.\");\n        } else {\n          console.error(asyncResult.error.message);\n        }\n      });\n    } else {\n      console.log(\"Please select a valid project.\");\n    }\n  }\n  \n \n  Office.onReady((info) => {\n    if (info.host === Office.HostType.Outlook) {\n      populateDropdown();\n      document.getElementById(\"projectDropdown\").onchange = addProjectToSubject;\n    }\n  });\n\n  function validateSubjectAndCC(event) {\n    shouldChangeSubjectOnSend(event);\n}\n\nfunction shouldChangeSubjectOnSend(event) {\n    mailboxItem.subject.getAsync(\n        { asyncContext: event },\n        function (asyncResult) {\n            addCCOnSend(asyncResult.asyncContext);\n            //console.log(asyncResult.value);\n            // Match string.\n            var checkSubject = (new RegExp(/\\[Checked\\]/)).test(asyncResult.value)\n            // Add [Checked]: to subject line.\n            subject = '[Checked]: ' + asyncResult.value;\n\n            // Check if a string is blank, null or undefined.\n            // If yes, block send and display information bar to notify sender to add a subject.\n            if (asyncResult.value === null || (/^\\s*$/).test(asyncResult.value)) {\n                mailboxItem.notificationMessages.addAsync('NoSend', { type: 'errorMessage', message: 'Please enter a subject for this email.' });\n                asyncResult.asyncContext.completed({ allowEvent: false });\n            }\n            else {\n                // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\n                if (!checkSubject) {\n                    subjectOnSendChange(subject, asyncResult.asyncContext);\n                    //console.log(checkSubject);\n                }\n                else {\n                    // Allow send.\n                    asyncResult.asyncContext.completed({ allowEvent: true });\n                }\n            }\n\n        }\n      )\n}\n\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject,\n        { asyncContext: event },\n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', { type: 'errorMessage', message: 'Unable to set the subject.' });\n\n                // Block send.\n                asyncResult.asyncContext.completed({ allowEvent: false });\n            }\n            else {\n                // Allow send.\n                asyncResult.asyncContext.completed({ allowEvent: true });\n            }\n\n        });\n}\n  ","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Project Dropdown</title> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://alcdn.msauth.net/browser/2.18.0/js/msal-browser.min.js\\\"><\" + \"/script> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <section id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <select id=\\\"projectDropdown\\\" class=\\\"ms-font-m ms-List\\\"> <option value=\\\"Select a project\\\" disabled=\\\"disabled\\\" selected=\\\"selected\\\">Select a project</option> </select> <br><br> </section> </body> </html>\";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","msalInstance","msal","PublicClientApplication","auth","clientId","authority","redirectUri","loginRequest","scopes","addProjectToSubject","project","getElementById","value","Office","context","mailbox","item","subject","setAsync","asyncResult","status","AsyncResultStatus","Succeeded","console","log","error","message","onReady","info","projectDropdown","host","HostType","Outlook","acquireTokenSilent","then","response","accessToken","catch","loginPopup","loginError","fetch","method","headers","json","data","options","remove","d","results","forEach","option","createElement","Title","text","add","onchange","URL"],"sourceRoot":""}